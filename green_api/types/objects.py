import time
from httpx import Response
from .errors import *

class Message:
    def __init__(self, data: dict):
        if "timestamp" in data:
            t: float = data['timestamp']
            local = time.localtime(t)
            self.timestamp = time.asctime(local)
        else:
            raise KeyNotFound("timestamp", data)
        

        if "idMessage" in data:
            self.message_id: str = data['idMessage']
        else:
            raise KeyNotFound("idMessage", data)
        
        if "senderData" in data:
            senderData: dict = data['senderData']

            if "chatId" in senderData:
                self.chat_id: str = senderData['chatId']
            else:
                raise KeyNotFound("chatId", data, self.message_id)

            if "sender" in senderData:
                self.sender: str = senderData['sender']
            else:
                raise KeyNotFound("sender", data, self.message_id)

            if self.chat_id!=self.sender:
                raise GroupMessage(data)

            if "chatName" in senderData:
                self.chat_name: str = senderData['chatName']
            else:
                self.chat_name = None
            
        else:
            raise KeyNotFound("senderData", data, self.message_id)



        if "messageData" in data:
            messageData: dict = data['messageData']

            if "typeMessage" in messageData:
                match (messageData['typeMessage']):
                    case ('textMessage'):
                        if "textMessage" in messageData['textMessageData']:
                            self.text: str = messageData['textMessageData']['textMessage']
                        else:
                            raise KeyNotFound("textMessage", data, self.message_id)

                    case ('quotedMessage'):
                        if "text" in messageData['extendedTextMessageData']:
                            self.text: str = messageData['extendedTextMessageData']['text']
                        else:
                            raise KeyNotFound("text", data, self.message_id)

                    case (_):
                        raise OtherMessage(data)
            else:
                raise KeyNotFound("typeMessage", data, self.message_id)
            
        else:
            raise KeyNotFound("messageData", data, self.message_id)


class Status:
    is_closed: bool
    message: str

    def __init__(self, is_closed: bool, message: str):
        self.is_closed = is_closed
        self.message = message


class Response:

    def __init__(self, response: Response):
        self.response = response
        if self.response.status_code != 200:
            raise ErrorRequest(response)

    def json(self):
        return self.response.json()

    def on_event(self)-> Message:
        self.receiptId = self.response.json()['receiptId']
        body = self.response.json()['body']
        
        if body['typeWebhook'] == 'incomingMessageReceived':
            return Message(body)    
        else:
            raise ErrorType(body)

    def state(self)-> bool:
        state = self.response.json()['stateInstance']
        if state=="authorized":
            return True
        else:
            return False

    def status(self)-> Status:
        state = self.response.json()['stateInstance']
        if state=="notAuthorized":
            return Status(
                True,
                "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω."
            )
        if state=="authorized":
            return Status(
                False,
                f"–ê–∫–∫–∞—É–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.\n\nüë§ +{self.response.json()['phone']}"
            )
        if state=="blocked":
            return Status(
                True,
                "–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–∞–Ω–µ–Ω."
            )
        if state=="sleepMode":
            return Status(
                False,
                f"<b>–°—Ç–∞—Ç—É—Å —É—Å—Ç–∞—Ä–µ–ª.</b> –ê–∫–∫–∞—É–Ω—Ç —É—à–µ–ª –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º. –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ, –∫–æ–≥–¥–∞ –≤—ã–∫–ª—é—á–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω. –ü–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–æ 5 –º–∏–Ω—É—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –∑–Ω–∞—á–µ–Ω–∏–µ <b>–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.</b>\n\nüë§ +{self.response.json()['phone']}"
            )
        if state=="starting":
            return Status(
                True,
                "–ê–∫–∫–∞—É–Ω—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø—É—Å–∫–∞ (—Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º). –ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Å—Ç–∞–Ω—Å–∞, —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –∏–Ω—Å—Ç–∞–Ω—Å –≤ —Ä–µ–∂–∏–º–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. –ú–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–æ 5 –º–∏–Ω—É—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –∑–Ω–∞—á–µ–Ω–∏–µ <b>–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.</b>"
            )
        if state=="yellowCard":
            return Status(
                False,
                f"–ù–∞ –∞–∫–∫–∞—É–Ω—Ç–µ —á–∞—Å—Ç–∏—á–Ω–æ –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑-–∑–∞ —Å–ø–∞–º–µ—Ä—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n\nüë§ +{self.response.json()['phone']}"
            )